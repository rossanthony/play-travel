# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions. We are using the same key to
# sign Json Web Tokens so you don't need to worry about it.
#
play.crypto.secret="?`wdc6<s]M=Z4VG][lSu1d48pxr;`FvQOl4H^XfvAJX5G<9W`jmSi/?XaFvT9hGb"

# Session timeout
# ~~~~~
# Just like for the cookie session, you can use this key to specify the duration,
# in milliseconds or using the duration syntax (for example 30m or 1h),
# after which the user should be logout, which mean the token will no longer be valid.
# It means you need to refresh the expiration date at each request
play.http.session.maxAge=30m

# Signature algorithm
# ~~~~~
# You can specify which algorithm you want to use, among the supported ones, in order to
# create the signature which will assure you that nobody can actually change the token.
# You should probably stick with the default one or use HmacSHA512 for maximum security.
# Default: HmacSHA256
# Supported: HmacMD5, HmacSHA1, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512
play.http.session.algorithm=HmacSHA512

# Header name
# ~~~~~
# You can change the name of the header in which the token should be stored.
# Default: Authorization
# play.http.session.jwtName=Jwt

# Token prefix
# ~~~~~
# Authorization header should have a prefix before the token, like "Basic" for example.
# For a JWT token, it should be "Bearer" (which is the default value) but you can freely
# change or remove it (using an empty string). The token prefix will be directly prepend
# before the token, so be sure to put any necessary whitespaces in it.
# Default: "Bearer "
# play.http.session.tokenPrefix="Bearer "

# The application languages
# ~~~~~
application.langs="en"

# utils.Global object class
# ~~~~~
# Define the utils.Global object class for this application.
# Default to utils.Global in the root package.
application.global=utils.Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#

## Configured Play to use the H2 Driver for Slick startup

//db.default.driver=org.h2.Driver
//db.default.url="jdbc:h2:mem:play"
//db.default.user=sa
//db.default.password=""

# Default database configuration using MySQL database engine
# Connect to playdb as playdbuser
db.default.driver=com.mysql.jdbc.Driver
db.default.url="jdbc:mysql://localhost/play-travel"
db.default.user=root
db.default.pass="o7avsudyv"


redis.uri="redis://user:password@localhost:6379"


#
# You can expose this datasource via JNDI if needed (Useful for JPA)
# db.default.jndiName=DefaultDS

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

#Slick configuration
slick.default="play.travel.models.*"

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG
