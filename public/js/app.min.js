'use strict';

// IE8 fix - be careful not to use console.warn() - it will cause IE8 to silently not run angular.
var console = console || {};

angular.module('PlayTravelApp', [
    'ui.router',
    'ngAnimate',
    'ngResource',
    'ngMessages',
    'ngSanitize',
    'ngCookies',
    'ui.bootstrap',
    //'ui.select',
    'angular-loading-bar',
    'toastr',
    'satellizer',
    'mgcrea.ngStrap',
    'ngMaterial',
    'md.data.table',
    'mdPickers',

    //App
    'PlayTravelApp.controllers',
    'PlayTravelApp.services',
    'PlayTravelApp.filters',

    //App Pages
    'PlayTravelApp.admin-flights',
    'PlayTravelApp.ui-search',
    'PlayTravelApp.auth'
])
    .config(['$stateProvider','$urlRouterProvider', '$httpProvider', '$authProvider', '$alertProvider', function ($stateProvider, $urlRouterProvider, $httpProvider, $authProvider, $alertProvider) {

        $urlRouterProvider
            .when("",  "/search")
            .when("/",  "/search")
            .when("/search/",  "/search")
            .when("/admin",  "/admin/flights")
            .when("/admin/", "/admin/flights")
            .otherwise(function($injector, $location){
                var state = $injector.get('$state');
                state.go('404.not-found');
                return $location.path();
            });

        $stateProvider
            .state('ui', { url: '', abstract: true, templateUrl: '/assets/tpls/ui-layout.html', controller: 'UiCtrl'})
            .state('auth', { url: '/auth', abstract: true, templateUrl: '/assets/tpls/ui-layout.html', controller: 'AuthCtrl'})
            .state('admin', { url: '/admin', abstract: true, templateUrl: '/assets/tpls/admin-layout.html', controller: 'AdminCtrl', resolve: {
                authenticated: function($q, $location, $auth) {
                    var deferred = $q.defer();
                    if (!$auth.isAuthenticated())
                        $location.path('/signIn');
                    else
                        deferred.resolve();
                    return deferred.promise;
                },
                UiData: function (UiData) {
                    return UiData();
                }
            }})
            .state('404', {  abstract: true, templateUrl: '/assets/tpls/ui-layout.html'})
            .state('404.not-found', { templateUrl: '/assets/tpls/404.html'})
        ;
    }])
    .config(['$locationProvider', function ($locationProvider) {
        $locationProvider.html5Mode(true);
    }])
    .config(function (toastrConfig) {
        angular.extend(toastrConfig, {
            allowHtml: true,
            positionClass: 'toast-bottom-right'
        });
    })
    .config(['$httpProvider', '$authProvider', function($httpProvider, $authProvider) {
        $httpProvider.interceptors.push(function($q, $injector) {
            return {
                request: function(request) {
                    // Add auth token for Silhouette if user is authenticated
                    var $auth = $injector.get('$auth');
                    if ($auth.isAuthenticated()) {
                        request.headers['X-Auth-Token'] = $auth.getToken();
                    }
                    // Add CSRF token for the Play CSRF filter
                    var cookies = $injector.get('$cookies');
                    var token = cookies.get('PLAY_CSRF_TOKEN');
                    if (token) {
                        // Play looks for a token with the name Csrf-Token
                        // https://www.playframework.com/documentation/2.4.x/ScalaCsrf
                        request.headers['Csrf-Token'] = token;
                    }
                    return request;
                },
                responseError: function(rejection) {
                    if(rejection.status === 404) {
                        $injector.get('$state').go('404.not-found');
                    }
                    if (rejection.status === 401) {
                        var $auth = $injector.get('$auth');
                        $auth.logout();
                        $injector.get('$state').go('auth.signIn');
                    }
                    return $q.reject(rejection);
                }
            };
        });
        // Auth config
        $authProvider.httpInterceptor = true; // Add Authorization header to HTTP request
        $authProvider.loginOnSignup = true;
        $authProvider.loginRedirect = '/admin/flights';
        $authProvider.logoutRedirect = '/auth/sign-in';
        $authProvider.signupRedirect = '/user/account';
        $authProvider.loginUrl = '/api/v1/auth/sign-in';
        $authProvider.signupUrl = '/api/v1/auth/sign-up';
        $authProvider.loginRoute = '/auth/sign-in';
        $authProvider.signupRoute = '/auth/sign-up';
        $authProvider.tokenName = 'token';
        $authProvider.tokenPrefix = 'satellizer'; // Local Storage name prefix
        $authProvider.authHeader = 'X-Auth-Token';
        $authProvider.platform = 'browser';
        $authProvider.storage = 'localStorage';
    }]);
'use strict';

/* Controllers */

angular.module('PlayTravelApp.controllers', [])
    //Page specific Controllers
    .controller('UiCtrl',['$rootScope', '$scope', '$state', '$stateParams', '$location', 'UiData', function ($rootScope, $scope, $state, $stateParams, $location, UiData) {
        $scope.uiData = UiData;
        console.log('user', $scope.uiData);
    }])
    .controller('AdminCtrl',['$rootScope', '$scope', '$state', '$stateParams', '$location', '$auth', 'UiData', function ($rootScope, $scope, $state, $stateParams, $location, $auth, UiData) {
        $scope.uiData = UiData;
        console.log('user', $scope.uiData);
    }])
    .controller('AuthCtrl',['$rootScope', '$scope', '$state', '$stateParams', '$location', function ($rootScope, $scope, $state, $stateParams, $location) {

    }])
    .controller('NotFoundController',['$scope', '$state', function ($scope, $state) {
        console.log('NotFound');
    }])
;

'use strict';

/* Filters */

angular.module('PlayTravelApp.filters', [])
    .filter('numberFixedLen', function () {
        return function (n, len) {
            var num = parseInt(n, 10);
            len = parseInt(len, 10);
            if (isNaN(num) || isNaN(len)) {
                return n;
            }
            num = ''+num;
            while (num.length < len) {
                num = '0'+num;
            }
            return num;
        };
    })
    .filter('fourDigitTime', function () {
        /**
         * Convert 24 hour numeric time format (e.g 1445 or 905) to
         * human readable ':' separated format (e.g 14:45 or 09:05)
         */
        return function (time) {
            var time = parseInt(time);
            if (isNaN(time)) {
                return time;
            }
            time = ''+time;
            // add prefix zero if less that 4
            while (time.length < 4) {
                time = '0'+time;
            }
            var timeFormated = '';
            for (var i = 0; i < time.length; i++) {
                timeFormated += time.charAt(i);
                if (i == 1) timeFormated += ':';
            }
            return timeFormated;
        };
    })
    .filter('price', function () {
        return function (price) {
            var price = parseInt(price);
            if (isNaN(price)) {
                return price;
            }
            return price.toLocaleString();
        };
    })
;
'use strict';

/* Services */

angular.module('PlayTravelApp.services', [])
    .factory('Ui', ['$resource', function ($resource) {
        return $resource('/api/v1/auth/user');
    }])
    .factory('UiData', ['$q','Ui', function ($q, Ui) {
        return function () {
            //return {data:[1,2,3]};
            var delay = $q.defer();
            Ui.get(function (data) {
                delay.resolve(data);
            }, function () {
                delay.reject('Unable to fetch data');
            });
            return delay.promise;
        };
    }])
    .factory('ReloadState', ['$state', function ($state) {
        return function () {
            $state.transitionTo($state.current.name, $state.params, {reload : $state.$current});
        }
    }])
;
'use strict';

angular.module(
    "PlayTravelApp.admin-flights",
    [
        "PlayTravelApp.admin-flights.controllers",
        "PlayTravelApp.admin-flights.services"
    ])
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('admin.flights', { url: '/flights?{items_per_page}&{page}', templateUrl: '/assets/tpls/admin/flights.html', controller: 'FlightsPageCtrl'})
            .state('admin.flights.item', { url: '/:flight', templateUrl: '/assets/tpls/admin/flight.html', controller: 'FlightPageCtrl'})
        ;
    }])
;
'use strict';

/* Controllers */

angular.module('PlayTravelApp.admin-flights.controllers', [])
    .controller('FlightsPageCtrl',['$scope', '$state','$flights', '$mdDialog', function ($scope, $state, $flights, $mdDialog) {

        var bookmark;

        $scope.selected = [];

        $scope.options = {
            autoSelect: true,
            boundaryLinks: true,
            largeEditDialog: true,
            pageSelector: true,
            rowSelection: true
        };

        $scope.filter = {
            options: {
                debounce: 500
            }
        };

        $scope.query = {
            order: 'departureLocation',
            limit: 5,
            page: 1,
            filter: ''
        };

        function getFlights(query) {
            console.log('query', query);
            $scope.promise = $flights.flights.get(query || $scope.query, success).$promise;
        }

        function success(flights) {
            $scope.flights = flights.data;
        }

        $scope.onPaginate = function (page, limit) {
            getFlights(angular.extend({}, $scope.query, {page: page, limit: limit}));
        };

        $scope.onReorder = function (order) {
            getFlights(angular.extend({}, $scope.query, {order: order}));
        };

        $scope.removeFilter = function () {
            $scope.filter.show = false;
            $scope.query.filter = '';

            if($scope.filter.form.$dirty) {
                $scope.filter.form.$setPristine();
            }
        };

        $scope.$watch('query.filter', function (newValue, oldValue) {
            if(!oldValue) {
                bookmark = $scope.query.page;
            }

            if(newValue !== oldValue) {
                $scope.query.page = 1;
            }

            if(!newValue) {
                $scope.query.page = bookmark;
            }

            getFlights();
        });

        $scope.addItem = function (event) {
            $mdDialog.show({
                clickOutsideToClose: true,
                controller: 'addFlightController',
                controllerAs: 'ctrl',
                focusOnOpen: false,
                targetEvent: event,
                templateUrl: 'assets/tpls/admin/add-flight-dialog.html',
            }).then(getFlights);
        };

        $scope.delete = function (event) {
            $mdDialog.show({
                clickOutsideToClose: true,
                controller: 'deleteFlightController',
                controllerAs: 'ctrl',
                focusOnOpen: false,
                targetEvent: event,
                locals: { flights: $scope.selected },
                templateUrl: 'assets/tpls/admin/delete-flight-dialog.html',
            }).then(getFlights);
        };

    }])
    .controller('addFlightController',['$scope', '$state', '$flights', '$mdDialog', function ($scope, $state, $flights, $mdDialog) {

        this.cancel = $mdDialog.cancel;

        function success(flight) {
            $mdDialog.hide(flight);
        }

        this.addItem = function () {
            $scope.item.form.$setSubmitted();

            if($scope.item.form.$valid) {
                $flights.flights.save({flight: $scope.flight}, success);
            }
        };

    }])
    .controller('deleteFlightController',['$scope', '$state', 'flights', '$flights', '$mdDialog', '$q', function ($scope, $state, flights, $flights, $mdDialog, $q) {

        this.cancel = $mdDialog.cancel;

        function deleteFlight(flight, index) {
            var deferred = $flights.flights.remove({id: flight._1.id});

            deferred.$promise.then(function () {
                flights.splice(index, 1);
            });

            return deferred.$promise;
        }

        function onComplete() {
            $mdDialog.hide();
        }

        this.confirm = function () {
            console.log('flights',flights);
            $q.all(flights.forEach(deleteFlight)).then(onComplete);
        }
    }])
;
'use strict';

/* Services */

angular.module('PlayTravelApp.admin-flights.services', [])
    .factory('$flights', ['$resource', function ($resource) {
        return {
            flights: $resource('/api/v1/flight/:id')
        };
    }]);

//angular.module('PlayTravelApp.admin-flights.services', [])
//    .factory('Flights', ['$resource', function ($resource) {
//        return $resource(
//            'http://127.0.0.1:9000/flights/:flight',
//            {
//                flight   : '@flight'
//            },
//            {
//                'get': {method: 'GET'},
//                'post': { method: 'POST', isArray: false}
//            });
//    }])
//    .factory('FlightsData', ['$q','Flights', function ($q, Flights) {
//        return function ($stateParams) {
//            var delay = $q.defer();
//            Flights.get({
//                page           : ($stateParams.page) ? $stateParams.page : null,
//                items_per_page : ($stateParams.items_per_page) ? $stateParams.items_per_page : null
//            },function (data) {
//                delay.resolve(data);
//            }, function () {
//                delay.reject('Unable to fetch data');
//            });
//            return delay.promise;
//        };
//    }])
//    .factory('FlightData', ['$q','Flights', function ($q, Flights) {
//        return function ($stateParams) {
//            var delay = $q.defer();
//            Flights.get({
//                flight : $stateParams.flight
//            },function (data) {
//                delay.resolve(data);
//            }, function () {
//                delay.reject('Unable to fetch data');
//            });
//            return delay.promise;
//        };
//    }])
//;
'use strict';

angular.module("PlayTravelApp.auth", ["PlayTravelApp.auth.controllers"])
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('auth.signIn',  { url: '/sign-in',  controller: 'SignInCtrl',  templateUrl: '/views/signIn.html' })
            .state('auth.signUp',  { url: '/sign-up',  controller: 'SignUpCtrl',  templateUrl: '/views/signUp.html' })
            .state('auth.signOut', { url: '/sign-out', controller: 'SignOutCtrl', templateUrl: null                 })
        ;
    }])
;
'use strict';

/* Controllers */

angular.module('PlayTravelApp.auth.controllers', [])
    .controller('SignUpCtrl',['$scope', '$auth', '$alert', function ($scope, $auth, $alert) {
        /**
         * The submit method.
         */
        $scope.submit = function(event) {
            event.preventDefault();
            console.log("Running $auth.signup() ...");
            console.log("$scope.firstName", $scope.firstName);

            $auth.signup({
                firstName: $scope.firstName,
                lastName: $scope.lastName,
                email: $scope.email,
                password: $scope.password
            }).then(function() {
                $alert({
                    content: 'You have successfully signed up',
                    animation: 'fadeZoomFadeDown',
                    type: 'material',
                    duration: 3
                });
            }).catch(function(response) {
                $alert({
                    content: response.data.message,
                    animation: 'fadeZoomFadeDown',
                    type: 'material',
                    duration: 3
                });
            });
        };
    }])
    .controller('SignInCtrl',['$scope', '$auth', '$alert', '$state', function ($scope, $auth, $alert, $state) {
        /**
         * Submits the login form.
         */
        $scope.submit = function() {
            $auth.setStorageType($scope.rememberMe ? 'localStorage' : 'sessionStorage');
            $auth.login({ email: $scope.email, password: $scope.password, rememberMe: $scope.rememberMe })
                .then(function() {
                    console.log("logged in!!");
                    $state.go('admin.flights');
                    $alert({
                        content: 'You have successfully signed in',
                        animation: 'fadeZoomFadeDown',
                        type: 'material',
                        duration: 3
                    });
                })
                .catch(function(response) {
                    console.log(response);
                    $alert({
                        content: response.data.message,
                        animation: 'fadeZoomFadeDown',
                        type: 'material',
                        duration: 3
                    });
                });
        };

        /**
         * Authenticate with a social provider.
         *
         * @param provider The name of the provider to authenticate.
         */
        $scope.authenticate = function(provider) {
            $auth.authenticate(provider)
                .then(function() {
                    $alert({
                        content: 'You have successfully signed in',
                        animation: 'fadeZoomFadeDown',
                        type: 'material',
                        duration: 3
                    });
                })
                .catch(function(response) {
                    $alert({
                        content: response.data.message,
                        animation: 'fadeZoomFadeDown',
                        type: 'material',
                        duration: 3
                    });
                });
        };

    }])
    .controller('SignOutCtrl',['$scope', '$auth', '$alert', '$state', function ($scope, $auth, $alert, $state) {
        if (!$auth.isAuthenticated()) {
            $state.go('auth.signIn');
            return;
        }
        $auth.logout()
            .then(function() {
                $alert({
                    content: 'You have been logged out',
                    animation: 'fadeZoomFadeDown',
                    type: 'material',
                    duration: 3
                });
                $state.go('auth.signIn');
            });
    }])
;
'use strict';

angular.module(
    "PlayTravelApp.ui-search",
    [
        "PlayTravelApp.ui-search.controllers",
        "PlayTravelApp.ui-search.services"
    ])
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('ui.search', { url: '/search?{items_per_page}&{page}', templateUrl: '/assets/tpls/ui/search.html', controller: 'SearchPageCtrl'})
        ;
    }])
;
'use strict';

/* Controllers */

angular.module('PlayTravelApp.ui-search.controllers', [])
    .controller('SearchPageCtrl',['$scope', '$state','Flights', '$mdDialog', function ($scope, $state, Flights, $mdDialog) {

        console.log('SearchPageCtrl');

        var bookmark;

        $scope.selected = [];

        $scope.options = {
            autoSelect: true,
            boundaryLinks: true,
            largeEditDialog: true,
            pageSelector: true,
            rowSelection: true
        };

        $scope.filter = {
            options: {
                debounce: 500
            }
        };

        $scope.query = {
            order: '',
            limit: 5,
            page: 1,
            departureDate: ''
        };

        $scope.datepickers = {
            departureDate: '',
            returnDate: ''
        };

        $scope.dateOptions = {
            dateFormat: "yy-mm-dd"
        };

        function getFlights(query) {
            console.log('query', query);

            // Format the dates correctly before passing to the service (otherwise Json.stringify will add timezone)
            if (typeof $scope.datepickers.departureDate === 'object') {
                $scope.query.departureDate = $scope.datepickers.departureDate.getFullYear().toString()
                    + '-' + ($scope.datepickers.departureDate.getMonth() + 1).toString()
                    + '-' + $scope.datepickers.departureDate.getDate().toString();
            }
            if (typeof $scope.datepickers.returnDate === 'object') {
                $scope.query.returnDate = $scope.datepickers.returnDate.getFullYear().toString()
                    + '-' + ($scope.datepickers.returnDate.getMonth() + 1).toString()
                    + '-' + $scope.datepickers.returnDate.getDate().toString();
            }
            console.log('$scope.query', $scope.query);
            $scope.promise = Flights.flights.get(query || $scope.query, success).$promise;
        }

        function success(flights) {
            $scope.flights = flights.data;
        }

        $scope.onPaginate = function (page, limit) {
            getFlights(angular.extend({}, $scope.query, {page: page, limit: limit}));
        };

        $scope.onReorder = function (order) {
            getFlights(angular.extend({}, $scope.query, {order: order}));
        };

        $scope.removeFilter = function () {
            $scope.filter.show = false;
            $scope.query.filter = '';

            if($scope.filter.form.$dirty) {
                $scope.filter.form.$setPristine();
            }
        };

        $scope.submit = function () {
            getFlights();
        };

        $scope.$watch('datepickers.departureDate', function (newValue, oldValue) {
            if(!oldValue) {
                bookmark = $scope.query.page;
            }

            if(newValue !== oldValue) {
                $scope.query.page = 1;
            }

            if(!newValue) {
                $scope.query.page = bookmark;
            }

            getFlights();
        });
    }])
;
'use strict';

/* Services */

angular.module('PlayTravelApp.ui-search.services', [])
    .factory('Flights', ['$resource', function ($resource) {
        return {
            flights: $resource('/api/v1/flight/search')
        };
    }])
    .factory('Airports', ['$resource', function ($resource) {
        return {
            airports: $resource('/api/v1/airport/list')
        };
    }])

    //.factory('Search', ['$resource', function ($resource) {
    //    return $resource(
    //        '/api/v1/search/flight',
    //        {
    //            'get': { method: 'GET' },
    //            'post': { method: 'POST', isArray: false}
    //        });
    //}])
    //.factory('SearchData', ['$q','Search', function ($q, Search) {
    //    return function ($stateParams) {
    //        var delay = $q.defer();
    //        Search.get({
    //            page           : ($stateParams.page) ? $stateParams.page : null,
    //            items_per_page : ($stateParams.items_per_page) ? $stateParams.items_per_page : null
    //        },function (data) {
    //            delay.resolve(data);
    //        }, function () {
    //            delay.reject('Unable to fetch data');
    //        });
    //        return delay.promise;
    //    };
    //}])
;